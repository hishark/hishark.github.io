<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on ᐕ)୨ 乾杯</title>
    <link>https://hishark777.com/tags/android/</link>
    <description>Recent content in Android on ᐕ)୨ 乾杯</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Nov 2020 19:20:55 +0800</lastBuildDate><atom:link href="https://hishark777.com/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 ConstraintLayout 构建自适应布局</title>
      <link>https://hishark777.com/post/constraint-layout/</link>
      <pubDate>Mon, 23 Nov 2020 19:20:55 +0800</pubDate>
      
      <guid>https://hishark777.com/post/constraint-layout/</guid>
      <description>ConstraintLayout 可以使用扁平控件层次结构（无嵌套控件组）来创建复杂的大型布局。它与 RelativeLayout 相似，其中所有的控件均根据同级控件与父布局之间的关系进行布局，但其灵活性要高于 RelativeLayout，并且更易于与 Android Studio 的布局编辑器配合使用。
ConstraintLayout 的所有功能均可直接通过布局编辑器的可视化工具来使用，因为布局 API 和布局编辑器是专为彼此构建的。 因此，我们完全可以使用 ConstraintLayout 通过拖放的形式（而非修改 XML）来构建布局。
 1. 如何添加 如果要在项目中使用 ConstraintLayout ，需要确保两点：
在模块级别的 build.gradle 文件中声明 maven.google.com 代码库：
repositories { google() } 在模块级别的 build.gradle 文件中添加 ConstraintLayout 库作为依赖项。（此处版本为 2.0.0）
dependencies { implementation &amp;#34;androidx.constraintlayout:constraintlayout:2.0.0&amp;#34; } 2. 转换布局 如果想将其他布局转换为 ConstraintLayout 约束布局，可以直接在 Component Tree 窗口中，右键该布局，点击 Convert xxx to ConstraintLayout 即可。
3. 约束条件 要在 ConstraintLayout 中定义某个控件的位置，必须为该控件添加至少一个水平约束条件和一个垂直约束条件。
每个约束条件均定义了控件在竖轴或者横轴上的位置，同时均表示了当前控件与其他控件、父布局或隐形引导线之间的连接或对齐方式。因此每个控件在每个轴上都至少有一个约束条件，但通常情况下会需要更多约束条件。
当我们将控件拖放到布局编辑器中时，即使没有任何约束条件，它也会停留在放置的位置。但是当运行应用后，若一个控件没有任何约束条件，则会在位置 [0,0]（即左上角）处进行绘制。
例如，在下图中，布局在编辑器中看着很完美，没什么问题，但是由于控件 C 上没有垂直约束条件，所以它会显示在屏幕的顶部。
下图对控件 C 添加了垂直约束条件，所以控件 C 会乖乖的处于控件 A 的正下方。</description>
    </item>
    
    <item>
      <title>What’s new in AS 4.1</title>
      <link>https://hishark777.com/post/as-4-1/</link>
      <pubDate>Mon, 19 Oct 2020 21:18:33 +0000</pubDate>
      
      <guid>https://hishark777.com/post/as-4-1/</guid>
      <description>Android Studio release notes | Android Developers
 Android Gradle 插件更新 新的 Database Inspector 在 AS 中直接运行模拟器 使用TensorFlow Native Memory Profiler System Trace 界面更新 独立的 Profilers 更方便的代码跳转 Material Design IDEA 2020.1 IDE 的配置路径更新 Kotlin 1.3.72 自定义控件预览 Apply Changes 优化  </description>
    </item>
    
    <item>
      <title>Room Database</title>
      <link>https://hishark777.com/post/room-database/</link>
      <pubDate>Thu, 15 Oct 2020 17:04:10 +0000</pubDate>
      
      <guid>https://hishark777.com/post/room-database/</guid>
      <description>1. 前言 ORM，Object Relational Mapping，对象关系映射，用于实现面向对象编程语言里不同类型系统的数据之间的转换。
目前有很多优秀的第三方框架比如：
 GreenDao Ormlite LitePal  上面这些也不是不能用，但是每次要用的时候左看看右看看，选数据库都要选个半天，直接用原生的 Room 比较省事啦。
2. Room 是什么 Room 在 SQLite 上提供了一个抽象层，以便在充分利用 SQLite 的强大功能的同时，能够流畅地访问数据库。
Room 主要包含三个主要的组件：
  数据库：包含数据库持有者，并作为应用已保留的持久关系型数据的底层连接的主要接入点。
使用 @Database 注解的类应该满足以下三个条件：
  该类是继承 RoomDatabase 的抽象类。
  在注解中需要添加与数据库关联的实体列表
  需要包含具 0 个参数且返回使用 @Dao 注解的类的抽象方法。
    在运行时，可以通过调用 Room.databaseBuilder() 或 Room.inMemoryDatabaseBuilder() 获取 Database 的实例。
 Entity：实体，表示数据库中的表。
  DAO：包含用于访问数据库的方法。
  首先，使用 Room 数据库来获取与该数据库相关联的数据访问对象 (DAO)。然后，使用每个 DAO 从数据库中获取实体，再将对这些实体的所有更改保存回数据库中。 最后，使用实体来获取和设置与数据库中的表列相对应的值。</description>
    </item>
    
    <item>
      <title>Room Database Viewer</title>
      <link>https://hishark777.com/post/roomdatabaseviewer/</link>
      <pubDate>Fri, 01 May 2020 01:18:15 +0000</pubDate>
      
      <guid>https://hishark777.com/post/roomdatabaseviewer/</guid>
      <description>&lt;p&gt;Android已经有很多基于SQLite的第三方ORM框架，比如GreenDao、LitePal、OrmLite等等，而Google又在2017年推出了亲儿子Room——在SQLite上提供了一个抽象层，以便在充分利用SQLite的强大功能的同时，能够流畅地访问数据库。于是Android本地数据的可选储存方案又多了一个。&lt;/p&gt;
&lt;p&gt;纠结了三分钟之后还是选了Room来保存本地数据，那么随之而来有一个新的问题，如何方便的查看数据库里的数据？&lt;/p&gt;
&lt;p&gt;查了一大堆之后选定了两个比较好用的工具——Stetho和Android Debug Database。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Genymotion 运行基于 ARM 架构的 APP</title>
      <link>https://hishark777.com/post/genymotion/</link>
      <pubDate>Wed, 01 Apr 2020 15:55:55 +0000</pubDate>
      
      <guid>https://hishark777.com/post/genymotion/</guid>
      <description>&lt;p&gt;前阵子需要做个直播demo，用到了阿里云的直播sdk，阿里云文档中说明了只支持arm架构的cpu，而Android Studio自带的模拟器只能顺畅的跑x86架构的虚拟机，跑arm64架构的简直卡成树懒，查了一下发现Android Studio自带的AVD就是这个德行，遂放弃，转用Genymotion。&lt;/p&gt;
&lt;p&gt;二月底决定毕业找Android岗的时候，下单了一台Pixel 2XL做自己以后的测试机，这篇文章写于购入Pixel之前，现在发现真机+模拟器一起用的测试环境还是挺舒服的。BTW谷歌亲儿子是真的好用啊，原生Android太香了，不出啥意外的话我以后就是iPhone主力机+Pixel备用机的快乐配置了哈哈哈哈哈。&lt;/p&gt;
&lt;p&gt;好的扯远了，聊正事。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>卡片盒子</title>
      <link>https://hishark777.com/post/cardbox/</link>
      <pubDate>Sat, 10 Nov 2018 15:58:43 +0000</pubDate>
      
      <guid>https://hishark777.com/post/cardbox/</guid>
      <description>&lt;p&gt;毕设放到Github私有库了
就先把README放这了嘿嘿&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>卡片盒子踩坑记录</title>
      <link>https://hishark777.com/post/%E5%8D%A1%E7%89%87%E7%9B%92%E5%AD%90%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 01 Nov 2018 20:54:46 +0000</pubDate>
      
      <guid>https://hishark777.com/post/%E5%8D%A1%E7%89%87%E7%9B%92%E5%AD%90%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;p&gt;毕设over🎈
两周爆肝碰到不少问题
记录一下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>卡片校园踩坑记录</title>
      <link>https://hishark777.com/post/%E5%8D%A1%E7%89%87%E6%A0%A1%E5%9B%AD%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sun, 08 Apr 2018 09:43:08 +0000</pubDate>
      
      <guid>https://hishark777.com/post/%E5%8D%A1%E7%89%87%E6%A0%A1%E5%9B%AD%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;p&gt;这次开发过程中碰到的问题都扔这，看最后能不能破百哦哈哈&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用 OkHttp 请求网络</title>
      <link>https://hishark777.com/post/%E5%88%A9%E7%94%A8okhttp%E8%AF%B7%E6%B1%82%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Tue, 27 Mar 2018 16:02:17 +0000</pubDate>
      
      <guid>https://hishark777.com/post/%E5%88%A9%E7%94%A8okhttp%E8%AF%B7%E6%B1%82%E7%BD%91%E7%BB%9C/</guid>
      <description>&lt;p&gt;HttpClient已经被亲爸抛弃了，那就来拥抱OkHttp吧。其余部分都和&lt;a class=&#34;link&#34; href=&#34;http://hishark.cc/2018/03/26/Android%e5%ae%a2%e6%88%b7%e7%ab%af%e8%ae%bf%e9%97%aeTomcat%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%ab%af/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Android客户端访问Tomcat服务器端&lt;/a&gt;一致，只需要改动LoginActivity和LoginUtil即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android 客户端访问 Tomcat 服务器端</title>
      <link>https://hishark777.com/post/android%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BF%E9%97%AEtomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/</link>
      <pubDate>Mon, 26 Mar 2018 14:47:24 +0000</pubDate>
      
      <guid>https://hishark777.com/post/android%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BF%E9%97%AEtomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/</guid>
      <description>&lt;p&gt;终于学会客户端访问服务端啦，JSON可以说是媒婆吧(●ˇ∀ˇ●)，记录一下总感觉没过几天就会忘了OTZ。另外HttpClient已经被谷歌亲爹抛弃啦，添添说学会一个再举一反三就好，之后再自学一下怎么用OkHttp。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Glide 大法好</title>
      <link>https://hishark777.com/post/glide%E5%A4%A7%E6%B3%95%E5%A5%BD/</link>
      <pubDate>Fri, 09 Mar 2018 13:03:01 +0000</pubDate>
      
      <guid>https://hishark777.com/post/glide%E5%A4%A7%E6%B3%95%E5%A5%BD/</guid>
      <description>&lt;p&gt;项目突然要加几个界面
然后打开了将近两个月没摸过的的AS
findViewById都给忘了我怕是智障&lt;/p&gt;
&lt;p&gt;真是开张大吉呢一运行就OOM
记得上学期被这个鬼东西烦到爆炸
搜了很多图片加载的工具类都没有用
然后就自己压缩图片让他勉强显示&lt;/p&gt;
&lt;p&gt;现在回头看我可能是猪吧
Glide这么美好的库为什么上学期没发现
简直是居家旅行必备产品啊呜呜呜
导个包然后用上这一句
什么OOM给我见鬼去886&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LruCache</title>
      <link>https://hishark777.com/post/lrucache/</link>
      <pubDate>Sat, 30 Dec 2017 21:28:47 +0000</pubDate>
      
      <guid>https://hishark777.com/post/lrucache/</guid>
      <description>&lt;p&gt;一直拖着图片缓存的小视频没看今天看了一哈
梳理一下&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
